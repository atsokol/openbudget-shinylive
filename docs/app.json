[{"name":"app.R","content":"# Shiny app for Open Budget - PRESS \"RUN APP\" button to launch\n\n# Install and load required packages\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, shiny, httr, jsonlite, writexl, here, DT)\n\n# Load city codes\ncity_codes <- read_csv(here(\"shiny_app/inputs/Open Budget city budget codes.csv\"))\ncurrent_year <- year(Sys.Date())\n\n# Source required functions from other files\nsource(here(\"shiny_app/download.R\"))\nsource(here(\"shiny_app/summarise.R\"))\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Open Budget: Ukraine municipality financials\"),\n    sidebarLayout(\n      sidebarPanel(\n        tags$head(tags$style(type=\"text/css\", \"\n             #loadmessage {\n               position: fixed;\n               top: 0px;\n               left: 0px;\n               width: 100%;\n               padding: 5px 0px 5px 0px;\n               text-align: center;\n               font-weight: bold;\n               font-size: 100%;\n               color: #000000;\n               background-color: #CCFF66;\n               z-index: 105;\n             }\n          \")),\n        selectInput(\"city\", \"Select city\", \n                    choices = city_codes$city),\n        numericInput(\"year_from\", label = \"Year from\", value = 2022, min = 2021, max = current_year),\n        numericInput(\"year_to\", label = \"Year to\", value = 2023, min = 2021, current_year),\n        actionButton(\"action\", label = \"Load data\", icon = icon(\"paper-plane\")),\n        hr(),\n        radioButtons(\"frac_period\", \"Select period\", \n                     choices = list(\"Latest\" = 1, \"3 months\" = 2, \"6 months\" = 3, \"9 months\" = 4, \"FY\" = 5),\n                     selected = 1),\n        radioButtons(\"button\", label = \"Display table\",\n                     choices = list(\"Financial summary\" = 1, \"Financial model\" = 2, \"Transfers\" = 3), \n                     selected = 1),\n        selectInput(\"grants\", \"Capital grants adjustment\",\n                    choices = c(),\n                    multiple = TRUE),\n        downloadButton(\"downloadData\", \"Download file\"),\n        conditionalPanel(condition=\"$('html').hasClass('shiny-busy')\",\n                         tags$div(\"Loading...\",id=\"loadmessage\"))\n      ),\n      \n      mainPanel( \n        DT::dataTableOutput(\"table\")\n      )\n    )\n  ),\n  \n  server = function(input, output, session) {\n    BUDGETCODE <- reactive({\n      city_chooser(input$city)\n      })\n    YEAR <- reactive({\n      seq(input$year_from, input$year_to)\n      })\n    \n    data <- eventReactive(input$action, {\n      download_data(BUDGETCODE(), YEAR())\n      })\n    \n    cap_grants <- reactive({\n      data()[[\"INCOMES\"]] |> \n        filter(COD_INCO >= 40000000, \n               COD_INCO <= 60000000) |> \n        select(COD_INCO, NAME_INC) |> \n        distinct() |> \n        arrange(COD_INCO)\n    })\n    \n    observeEvent(input$table_rows_selected, {\n      if (input$button == 3) {\n        rows <- input$table_rows_selected\n        updateSelectInput(inputId = \"grants\",\n                          choices = cap_grants()[[\"COD_INCO\"]],\n                          selected = cap_grants()[[\"COD_INCO\"]][rows])\n      }\n    })\n    \n    table <- reactive({\n      summarise_data(data(), input$frac_period, input$grants)\n      })\n    \n    display_table <- reactive({\n      if (input$button == 1) {\n        table()[['SUMMARY_UPDATE']]\n      } else if (input$button == 2) {\n        table()[['SUMMARY_MODEL']]\n      } else if (input$button == 3) {\n        cap_grants()\n      }\n    })\n    \n    output$table <- renderDataTable(\n      datatable(\n        display_table(), \n        options = list(pageLength = 30, autoWidth = TRUE),\n        selection = list(target = \"row\", mode = \"multiple\", \n                         selected = if (input$button == 3) {\n                           which(cap_grants()[[\"COD_INCO\"]] %in% input$grants)\n                           })\n        ) \n      )\n\n    output$downloadData <- downloadHandler(\n      filename = function() {\n        paste(input$city,\" \", input$year_from, \"-\", input$year_to, \".xlsx\", sep = \"\")\n      },\n      content = function(file) {\n        write_xlsx(table(), file)\n      }\n    ) \n    \n  }\n)\n  \n","type":"text"},{"name":"download.R","content":"# Functions to download data from Open Budget portal\n\ncity_chooser <- function(City) {\n  city_codes <- read_csv(here(\"shiny_app/inputs/Open Budget city budget codes.csv\"))\n  \n  vec <- city_codes |>\n    filter(city == City) |> \n    select(-1) |> \n    unlist(use.names = FALSE)\n\n  return(vec)\n}\n\n\napi_construct <- function(budgetCode, \n                          budgetItem, # \"INCOMES\",\"EXPENSES\",\"FINANCING_DEBTS\",\"FINANCING_CREDITOR\",\"CREDITS\"),\n                          classificationType, # \"PROGRAM\",\"FUNCTIONAL\",\"ECONOMIC\",\"CREDIT\"\n                          year, \n                          period = \"MONTH\") {\n  \n  api_base <- \"https://api.openbudget.gov.ua/api/public/localBudgetData?\"\n  \n  if (budgetItem %in% c(\"EXPENSES\", \"CREDITS\")) {  \n    api_path <- \n      paste(api_base,\n            \"budgetCode=\", budgetCode,\n            \"&budgetItem=\", budgetItem,\n            \"&classificationType=\", classificationType,  # classificationType parameter is mandatory for EXPENSES and CREDITS items\n            \"&period=\", period,\n            \"&year=\", year,\n            sep = \"\")\n  } else {\n    api_path <- \n      paste(api_base,\n            \"budgetCode=\", budgetCode,\n            \"&budgetItem=\", budgetItem,\n            \"&period=\", period,\n            \"&year=\", year,\n            sep = \"\")\n  }\n  \n  return(api_path)\n}\n\n# Function to call API, read in and parse data\ncall_api <- function(api_path, col_types) {\n  data_call <- GET(api_path) |> \n    pluck(\"content\") |> \n    rawToChar() |> \n    read_delim(delim = \";\", col_types = col_types) |> \n    mutate(REP_PERIOD = readr::parse_date(REP_PERIOD, \"%m.%Y\") |> \n             ceiling_date(unit = \"month\") - days(1))  # Use end of month dates\n  \n  return(data_call)\n}\n\n# Function to download data\ndownload_data <- function(BUDGETCODE, YEAR) {\n  var_types <- read_csv(here(\"shiny_app/inputs/Open Budget variable types v2.csv\"))\n  \n  # Construct API calls\n  df_api <- var_types |> \n    group_by(budgetItem, classificationType) |> \n    summarise(col_type = paste(colType, collapse = \"\"), .groups = \"drop\") |> \n    mutate(across(everything(), str_trim)) |>  # trim white space in category names\n    expand_grid(budgetCode = BUDGETCODE, year = YEAR) |> \n    rowwise() |> \n    mutate(api_path = api_construct(budgetCode, budgetItem, classificationType, year)) \n  \n  # Read in data across multiple periods and categories into a nested data frame\n  df_n <- df_api |> \n    mutate(data = list(call_api(api_path, col_type))) |> \n    select(budgetItem, classificationType, data) |> \n    group_by(budgetItem, classificationType) |> \n    summarise(data = list(list_rbind(data) |> arrange(REP_PERIOD)))\n  \n  \n  # Extract nested data column into a named list\n  data_l <- df_n$data\n  names(data_l) <- if_else(!is.na(df_n$classificationType),\n                           paste(df_n$budgetItem, df_n$classificationType, sep=\", \"),\n                           df_n$budgetItem)\n  \n  return(data_l)\n}\n","type":"text"},{"name":"inputs/Open Budget category for model.csv","content":"﻿CATEG,NAME_TYPE,BREAK_START,BREAK_END\r\nEXP,Staff Cost,0,2199\r\nEXP,Purchase of materials,2200,2249\r\nEXP,Current Discretionary Expenditure,2250,2269\r\nEXP,Utility payments,2270,2279\r\nEXP,Capex,2280,2281\r\nEXP,Current Discretionary Expenditure,2282,2399\r\nEXP,Interest paid,2400,2599\r\nEXP,\"Transfer to legal entities, institutions, organizations\",2600,2619\r\nEXP,Transfers to other budgets,2620,2699\r\nEXP,Transfer to residents,2700,2799\r\nEXP,Current Discretionary Expenditure,2800,2999\r\nEXP,Capex,3000,3199\r\nEXP,Capital Transfers (equity contributions),3200,3219\r\nEXP,Capital Transfers (budget & population),3220,8999\r\nEXP,Current Discretionary Expenditure,9000,9999\r\nINC,Personal income tax,0,11019999\r\nINC,Other Tax Revenues,11020000,13999999\r\nINC,Internal goods and services taxes,14000000,14999999\r\nINC,Other Tax Revenues,15000000,18049999\r\nINC,Unified income tax,18050000,18059999\r\nINC,Other Tax Revenues,18050000,19999999\r\nINC,Other Non-Tax Revenues,20000000,21010499\r\nINC,Interest received,21010500,21010599\r\nINC,Other Non-Tax Revenues,21010600,21010699\r\nINC,Interest received,21010700,21011199\r\nINC,Other Non-Tax Revenues,21011200,24109999\r\nINC,Interest received,24110000,24119999\r\nINC,Other Non-Tax Revenues,24120000,29999999\r\nINC,Sale of assets,30000000,39999999\r\nINC,Transfers,40000000,41999999\r\nINC,Capital grants,42000000,42999999\r\nINC,Transfers,43000000,49999999\r\nINC,Other Non-Tax Revenues,50000000,59999999","type":"text"},{"name":"inputs/Open Budget city budget codes.csv","content":"﻿city,budget_code_1,budget_code_2\r\nCherkasy,2357600000,23576000000\r\nChernivtsi,2455200000,24552000000\r\nDnipro,0457600000,04576000000\r\nIvano-Frankivsk,0953300000,09533000000\r\nKharkiv,2055400000,20554000000\r\nKhmelnytskyi,2256400000,22564000000\r\nKremenchuk,1656400000,16564000000\r\nKryvyi Rih,0457810000,04578100000\r\nKyiv,2600000000,26000000000\r\nLutsk,0355100000,03551000000\r\nLviv,1356300000,13563000000\r\nMykolaiv,1454900000,14549000000\r\nOdesa,1556400000,15564000000\r\nPoltava,1657010000,16570100000\r\nTernopil,1954900000,19549000000\r\nUzhhorod,0755900000,07559000000\r\nVinnitsia,0253600000,02536000000\r\nZhytomyr,0655200000,06552000000","type":"text"},{"name":"inputs/Open Budget variable types v2.csv","content":"﻿budgetItem,classificationType,variable,description,colType\r\nINCOMES,,REP_PERIOD , Місяць та рік,c\r\nINCOMES,,FUND_TYP , Тип фонду,f\r\nINCOMES,,COD_BUDGET , Код бюджету,c\r\nINCOMES,,COD_INCO , Код доходу,i\r\nINCOMES,,NAME_INC , Найменування коду доходу,c\r\nINCOMES,,ZAT_AMT , Розпис на рік з урахуванням змін,d\r\nINCOMES,,PLANS_AMT , Кошторисні призначення на рік з урахуванням змін,d\r\nINCOMES,,FAKT_AMT , Виконано за період,d\r\nINCOMES,,DONE_CORR_YEAR_PCT ,\" Виконання до уточненого річного розпису,%\",d\r\nFINANCING_DEBTS,,REP_PERIOD  , Місяць та рік,c\r\nFINANCING_DEBTS,,FUND_TYP , Тип фонду,f\r\nFINANCING_DEBTS,,COD_BUDGET , Код бюджету,c\r\nFINANCING_DEBTS,,COD_FINA , Код ,i\r\nFINANCING_DEBTS,,NAME_FIN , Найменування,c\r\nFINANCING_DEBTS,,ZAT_AMT , Розпис на рік з урахуванням змін,d\r\nFINANCING_DEBTS,,FAKT_AMT , Виконано за період,d\r\nFINANCING_DEBTS,,DONE_CORR_YEAR_PCT ,\" Виконання до уточненого річного рохпису, %\",d\r\nEXPENSES,ECONOMIC,REP_PERIOD , Місяць та рік  ,c\r\nEXPENSES,ECONOMIC,FUND_TYP , Тип фонду,f\r\nEXPENSES,ECONOMIC,COD_BUDGET , Код бюджету,c\r\nEXPENSES,ECONOMIC,COD_CONS_EK , Код економічної класифікації (КЕК),i\r\nEXPENSES,ECONOMIC,COD_CONS_EK_NAME , Найменування КЕК,c\r\nEXPENSES,ECONOMIC,ZAT_AMT , Розпис на рік з урахуванням змін,d\r\nEXPENSES,ECONOMIC,PLANS_AMT , Кошторисні призначення на рік з урахуванням змін,d\r\nEXPENSES,ECONOMIC,FAKT_AMT , Виконано за період,d\r\nEXPENSES,ECONOMIC,FAKT_V2MB_AMT , Виконано за період (в т.ч. на рахунках у банках),d\r\nEXPENSES,ECONOMIC,FAKTSIK_AMT , в т.ч. за іншими коштами спеціального фонду,d\r\nEXPENSES,ECONOMIC,FAKTSIK_V2MB_AMT , в т.ч. за іншими коштами спеціального фонду (в т.ч. на рахунках у банках),d\r\nEXPENSES,ECONOMIC,FAKTSPP_AMT ,\" в т.ч. із плати за послуги, що надаються бюджетним установам\",d\r\nEXPENSES,ECONOMIC,FAKTSPP_V2MB_AMT ,\" в т.ч. із плати за послуги, що надаються бюджетним установам (в т.ч. на рахунках у банках)\",d\r\nEXPENSES,ECONOMIC,FAKTSID_AMT , в т.ч. за іншими джерелами власних надходжень бюджетних установ,d\r\nEXPENSES,ECONOMIC,FAKTSID_V2MB_AMT , в т.ч. за іншими джерелами власних надходжень бюджетних установ (в т.ч. на рахунках у банках),d\r\nEXPENSES,ECONOMIC,DONE_CORR_YEAR_PCT ,\" Виконання до уточненого річного розпису, %\",d\r\nCREDITS,CREDIT,REP_PERIOD , Місяць та рік  ,c\r\nCREDITS,CREDIT,FUND_TYP , Тип фонду,f\r\nCREDITS,CREDIT,COD_BUDGET , Код бюджету,c\r\nCREDITS,CREDIT,COD_CRED_KK ,Код Класифікації Кредитування,i\r\nCREDITS,CREDIT,COD_CRED_KK_NAME ,Найменування ККК,c\r\nCREDITS,CREDIT,ZAT_AMT ,Розпис на рік з урахуванням змін,d\r\nCREDITS,CREDIT,PLANS_AMT ,Кошторисні призначення на рік з урахуванням змін,d\r\nCREDITS,CREDIT,FAKT_AMT ,Виконано за період,d\r\nCREDITS,CREDIT,FAKTBN_AMT ,Виконано за період (в т.ч. на рахунках у банках),d\r\nCREDITS,CREDIT,DONE_CORR_YEAR_PCT,\"Виконання до уточненого річного розпису, %\",d","type":"text"},{"name":"summarise.R","content":"# Functions to summarise data downloaded from Open Budget portal\n\n# Function to aggregate and reshape data in the SUMMARY table\nreshape_table <- function(df, date, group_var) {\n  # Latest date for which data is available\n  last_date <- max(df$REP_PERIOD)\n  \n  # Latest available budget (plan) figures\n  budget <- df |>\n    filter(REP_PERIOD == last_date,\n           FUND_TYP == \"T\") |>\n    group_by({{group_var}}, REP_PERIOD) |>\n    summarise(ZAT_AMT = sum(ZAT_AMT), .groups = \"drop\") |>\n    mutate(REP_PERIOD = paste0(year(REP_PERIOD), \"_B\")) |>  # period label for budget amounts\n    pivot_wider(names_from = \"REP_PERIOD\", values_from = \"ZAT_AMT\")\n  \n  # Actual figures\n  df_table <- df |> \n    filter(month(REP_PERIOD) %in% c(month(date), 12),\n           FUND_TYP == \"T\")|>\n    group_by({{group_var}}, REP_PERIOD) |>  \n    summarise(FAKT_AMT = sum(FAKT_AMT), .groups = \"drop\") |> \n    mutate(REP_PERIOD = ifelse(month(REP_PERIOD) == 12, \n                               year(REP_PERIOD), \n                               paste0(month(REP_PERIOD), \"m \", year(REP_PERIOD)))) |> # period labels for actual amounts\n    pivot_wider(names_from = \"REP_PERIOD\", values_from = \"FAKT_AMT\") |> \n    full_join(budget, by = join_by({{group_var}} == {{group_var}})) |> \n    mutate(across(where(is.double), ~ round(.x / 10^6, 2))) # convert units to millions UAH\n  \n  return(df_table)\n}\n\nsummarise_data <- function(data_l, period, adj_cat = NULL) {\n  # Latest date for which data is available\n  last_date <- max(data_l$INCOMES$REP_PERIOD)\n  \n  # Reporting date based on chooser in the Shiny app\n  date <- case_when(\n    period == 1 ~ last_date,\n    period == 2 ~ ymd(paste(year(last_date), 03, 31)),\n    period == 3 ~ ymd(paste(year(last_date), 06, 30)),\n    period == 4 ~ ymd(paste(year(last_date), 09, 30)),\n    period == 5 ~ ymd(paste(year(last_date), 12, 31))\n  )\n    \n  # Aggregate data by category\n  inc <- data_l$INCOMES |>\n    mutate(TYPE = cut(COD_INCO, \n                      breaks = c(0,19999999,29999999,39999999,60000000),\n                      labels = c(\"Tax\",\"Non-tax\",\"Capital revenues\",\"Transfers\"))\n    ) |> \n    reshape_table(date, TYPE) |> \n    mutate(CAT = \"Income\", .before=1)\n  \n  \n  exp <- data_l$`EXPENSES, ECONOMIC` |> \n    mutate(TYPE = cut(COD_CONS_EK, \n                      breaks = c(0,2280,2281,2399,2421,2999,8999,9001),\n                      labels = c(\"Opex\",\"Capex\",\"Opex\",\"Interest\",\"Opex\",\"Capex\",\"Opex\"))\n    ) |> \n    reshape_table(date, TYPE) |> \n    mutate(CAT = \"Expense\", .before=1)|>\n    mutate(across(where(is.numeric), ~.x*-1)) #change the sign of the inputs\n  \n  fin <- data_l$FINANCING_DEBTS |> \n    mutate(TYPE = case_when(COD_FINA == 401000 ~ \"New Borrowing\",\n                            COD_FINA == 402000 ~ \"Debt Repayments\",\n                            COD_FINA == 602300 ~ \"Interbudget loans\",\n                            TRUE ~ \"NA\")\n    ) |> \n    reshape_table(date, TYPE) |> \n    mutate(CAT = \"Financing\", .before=1)\n  \n  credit <- data_l$`CREDITS, CREDIT` |>\n    mutate(TYPE = \"Budget loans balance\") |>\n    reshape_table(date, TYPE) |> \n    mutate(CAT = \"Loans\", .before=1)|>\n    mutate(across(where(is.numeric), ~.x*-1)) #change the sign of the inputs\n  \n  cash <- data_l$FINANCING_DEBTS |>\n    mutate(TYPE = case_when(COD_FINA == 602100  ~ \"Cash, bop\",\n                          COD_FINA == 602200 ~ \"Cash, eop\",\n                          TRUE ~ \"NA\")\n    )|>\n    reshape_table(date, TYPE)|>\n    mutate(CAT = \"Cash balance\", .before=1)\n  \n  #Function to arrange the table according to the template\n  for_template <- function (df, category, codes) {\n    \n    category_df <- df|>\n      filter(TYPE %in% c(codes))|>\n      summarise_if(is.numeric, sum)|>\n      mutate(across(where(is.double), ~ round(.x, 2))) |> \n      mutate(CAT = \"Total\", TYPE = category, .before = 1)\n    \n    df_temp <- rbind.data.frame(df, category_df)\n    \n    return(df_temp)\n  }\n  \n  #Summarize the template for monitoring\n  template <- rbind(inc, exp, fin, credit, cash)|>\n    for_template(category = \"Current revenues\", codes = c(\"Tax\",\"Non-tax\",\"Transfers\"))|>\n    for_template(\"Operating surplus\", codes = c(\"Current revenues\",\"Opex\"))|>\n    for_template(\"Current surplus\", codes = c(\"Operating surplus\",\"Interest\"))|>\n    for_template(\"Capital surplus\", codes = c(\"Capital revenues\",\"Capex\"))|>\n    for_template(\"Net surplus before financing\", codes = c(\"Capital surplus\",\"Current surplus\"))|>\n    for_template(\"Net debt\", codes = c(\"New Borrowing\",\"Debt Repayments\"))|>\n    for_template(\"Net surplus\",codes = c(\"Net surplus before financing\",\"Net debt\",\"Budget loans balance\"))|>\n    arrange(factor(TYPE, levels = c(\"Tax\",\"Non-tax\",\"Transfers\",\"Current revenues\",\"Opex\",\"Operating surplus\",\"Interest\",\n                                    \"Current surplus\",\"Capital revenues\",\"Capex\",\"Capital surplus\",\n                                    \"Net surplus before financing\",\"New Borrowing\",\"Debt Repayments\",\n                                    \"Net debt\",\"Budget loans balance\",\"Net surplus\",\"Interbudget loans\", \n                                    \"Cash, bop\",\"Cash, eop\"))) |> \n    filter(TYPE != \"NA\")\n  \n  # Write final output\n  output <- data_l\n  output <- append(output, list(SUMMARY_UPDATE = template), after=0)\n  \n  #Aggregate income data for the model\n  inc_exp_categ <- read_csv(here(\"shiny_app/inputs/Open Budget category for model.csv\"))\n  \n  inc_categ <- inc_exp_categ |>\n    filter(CATEG == \"INC\")\n  \n  exp_categ <- inc_exp_categ |>\n    filter(CATEG == \"EXP\")\n  \n  inc_m <- data_l$INCOMES |>\n    mutate(TYPE = cut(COD_INCO, \n                      breaks = c(0, inc_categ$BREAK_END),\n                      labels = c(inc_categ$NAME_TYPE))\n    )\n  \n  #Check the transfers and re-categorize capital grants\n  transfers <- inc_m |>\n    filter(TYPE == \"Transfers\",\n           FUND_TYP == \"T\")\n  \n  transfers_names <- unique(transfers$NAME_INC) |>\n    cbind(unique(transfers$COD_INCO)) \n  \n  #Aggregate final income data for the model including adjustment for capital grants\n  inc_m <- inc_m |>\n    mutate(TYPE = replace(TYPE, COD_INCO %in% adj_cat, \"Capital grants\")) |> #the budget code was from the transfers table\n    reshape_table(date, TYPE) |> \n    mutate(CAT = \"Income\", .before=1)\n  \n  #Aggregate expense data for the model\n  exp_m <- data_l$`EXPENSES, ECONOMIC` |> \n    mutate(TYPE = cut(COD_CONS_EK, \n                      breaks = c(0, exp_categ$BREAK_END),\n                      labels = c(exp_categ$NAME_TYPE))\n    ) |> \n    reshape_table(date, TYPE) |> \n    mutate(CAT = \"Expense\", .before=1)|>\n    mutate(across(where(is.numeric), ~.x*-1)) #change the sign of the inputs\n  \n  model_template <- rbind(inc_m, exp_m, fin, credit, cash) |>\n    filter(!TYPE==\"NA\")\n  \n  #Add separate tab to output excel\n  output <- append(output, list(SUMMARY_MODEL = model_template), after=0)\n  \n  return(output)\n  \n}\n","type":"text"}]
